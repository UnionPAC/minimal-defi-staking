{
  "language": "Solidity",
  "sources": {
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nerror Staking__TransferFailed();\nerror Withdraw__TransferFailed();\nerror ClaimReward__TransferFailed();\nerror MoreThanZero__MustBeMoreThanZero();\n\ncontract Staking {\n\n    // the ONLY token accepted by our contract for staking\n    IERC20 public s_stakingToken;\n    // the token give as a reward for staking\n    IERC20 public s_rewardToken;\n\n    // how much a user has staked\n    mapping(address => uint256) public s_balances;\n    // how much each user has been paid\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\n    // how much rewards each user has availabe to claim\n    mapping(address => uint256) public s_rewards;\n\n    uint256 public constant REWARD_RATE = 100;\n    uint256 public s_totalSupply;\n    uint256 public s_rewardPerStakedToken;\n    uint256 public s_lastUpdateTime;\n\n    modifier updateReward(address account) {\n        // what is the reward per token stored?\n        // s_rewardPerStakedToken = totalEmit / totalSupply\n        s_rewardPerStakedToken = rewardPerToken();\n        s_lastUpdateTime = block.timestamp;\n        s_rewards[account] = earned(account);\n        s_userRewardPerTokenPaid[account] = s_rewardPerStakedToken;\n        _;\n    }\n\n    modifier moreThanZero(uint256 amount) {\n        if(amount == 0) {\n            revert MoreThanZero__MustBeMoreThanZero();\n        }\n        _;\n    }\n\n    constructor(address stakingToken, address rewardToken) {\n        s_stakingToken = IERC20(stakingToken);\n        s_rewardToken = IERC20(rewardToken);\n    }\n\n    // only allows one specific ERC20 token\n    // require that the token given is the accepted token\n    function stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount){\n        s_balances[msg.sender] += amount;\n        s_totalSupply += amount;\n        // emit event\n\n        //transferFrom is from IERC20\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\n         // require(success, \"Failed to stake\");\n         if(!success) {\n             revert Staking__TransferFailed();\n         }\n    }\n\n    function withdraw(uint256 amount) external updateReward(msg.sender) moreThanZero(amount){\n        s_balances[msg.sender] -= amount;\n        s_totalSupply -= amount;\n        // transfer is from IERC20\n        bool success = s_stakingToken.transfer(msg.sender, amount);\n        if(!success) {\n            revert Withdraw__TransferFailed();\n        }\n    }\n\n    function rewardPerToken() public view returns(uint256){\n        if(s_totalSupply == 0) {\n            return s_rewardPerStakedToken;\n        } \n        return s_rewardPerStakedToken + (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18/ s_totalSupply ));\n    }\n\n    function earned(address account) public view returns(uint256) {\n        uint256 currentBalance = s_balances[account];\n        // how much have they been paid already?\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\n        uint256 currentRewardPerToken = rewardPerToken();\n        uint256 pastRewards = s_rewards[account];\n\n        uint256 totalEarned = ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\n        return totalEarned;\n    }\n\n    function claimReward() external updateReward(msg.sender) {\n        uint256 rewards = s_rewards[msg.sender];\n        bool success = s_rewardToken.transfer(msg.sender, rewards);\n        if(!success) {\n            revert ClaimReward__TransferFailed();\n        }\n    }\n\n    function getStaked(address account) public view returns (uint256) {\n        return s_balances[account];\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}