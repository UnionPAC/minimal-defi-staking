{
  "address": "0x6d602224901A7a3D92de1972d0475Cd549338aB8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ClaimReward__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MoreThanZero__MustBeMoreThanZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Staking__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Withdraw__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "REWARD_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardPerStakedToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_rewardToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x076eeed660699cfd26375a86ba41ae6017eef0a35ee29d5069522fb06b4fe7df",
  "receipt": {
    "to": null,
    "from": "0x39334F78CAD19DDf7b180c34998501da9e0EdB76",
    "contractAddress": "0x6d602224901A7a3D92de1972d0475Cd549338aB8",
    "transactionIndex": 28,
    "gasUsed": "974695",
    "logsBloom": "0x
    "blockHash": "0x75e3bd73c2a22c9d50200ca685ee4c9acf1cd78a7a875d6067d3c05394824eae",
    "transactionHash": "0x076eeed660699cfd26375a86ba41ae6017eef0a35ee29d5069522fb06b4fe7df",
    "logs": [],
    "blockNumber": 12259385,
    "cumulativeGasUsed": "7893825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6b75F86dBD722D6Ab04f8052c3de9FAcE263A098",
    "0x6b75F86dBD722D6Ab04f8052c3de9FAcE263A098"
  ],
  "numDeployments": 2,
  "solcInputHash": "c935203aad4b0d93de9d828172d03012",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ClaimReward__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MoreThanZero__MustBeMoreThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Staking__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Withdraw__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"REWARD_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardPerStakedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/Staking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nerror Staking__TransferFailed();\\nerror Withdraw__TransferFailed();\\nerror ClaimReward__TransferFailed();\\nerror MoreThanZero__MustBeMoreThanZero();\\n\\ncontract Staking {\\n\\n    // the ONLY token accepted by our contract for staking\\n    IERC20 public s_stakingToken;\\n    // the token give as a reward for staking\\n    IERC20 public s_rewardToken;\\n\\n    // how much a user has staked\\n    mapping(address => uint256) public s_balances;\\n    // how much each user has been paid\\n    mapping(address => uint256) public s_userRewardPerTokenPaid;\\n    // how much rewards each user has availabe to claim\\n    mapping(address => uint256) public s_rewards;\\n\\n    uint256 public constant REWARD_RATE = 100;\\n    uint256 public s_totalSupply;\\n    uint256 public s_rewardPerStakedToken;\\n    uint256 public s_lastUpdateTime;\\n\\n    modifier updateReward(address account) {\\n        // what is the reward per token stored?\\n        // s_rewardPerStakedToken = totalEmit / totalSupply\\n        s_rewardPerStakedToken = rewardPerToken();\\n        s_lastUpdateTime = block.timestamp;\\n        s_rewards[account] = earned(account);\\n        s_userRewardPerTokenPaid[account] = s_rewardPerStakedToken;\\n        _;\\n    }\\n\\n    modifier moreThanZero(uint256 amount) {\\n        if(amount == 0) {\\n            revert MoreThanZero__MustBeMoreThanZero();\\n        }\\n        _;\\n    }\\n\\n    constructor(address stakingToken, address rewardToken) {\\n        s_stakingToken = IERC20(stakingToken);\\n        s_rewardToken = IERC20(rewardToken);\\n    }\\n\\n    // only allows one specific ERC20 token\\n    // require that the token given is the accepted token\\n    function stake(uint256 amount) external updateReward(msg.sender) moreThanZero(amount){\\n        s_balances[msg.sender] += amount;\\n        s_totalSupply += amount;\\n        // emit event\\n\\n        //transferFrom is from IERC20\\n        bool success = s_stakingToken.transferFrom(msg.sender, address(this), amount);\\n         // require(success, \\\"Failed to stake\\\");\\n         if(!success) {\\n             revert Staking__TransferFailed();\\n         }\\n    }\\n\\n    function withdraw(uint256 amount) external updateReward(msg.sender) moreThanZero(amount){\\n        s_balances[msg.sender] -= amount;\\n        s_totalSupply -= amount;\\n        // transfer is from IERC20\\n        bool success = s_stakingToken.transfer(msg.sender, amount);\\n        if(!success) {\\n            revert Withdraw__TransferFailed();\\n        }\\n    }\\n\\n    function rewardPerToken() public view returns(uint256){\\n        if(s_totalSupply == 0) {\\n            return s_rewardPerStakedToken;\\n        } \\n        return s_rewardPerStakedToken + (((block.timestamp - s_lastUpdateTime) * REWARD_RATE * 1e18/ s_totalSupply ));\\n    }\\n\\n    function earned(address account) public view returns(uint256) {\\n        uint256 currentBalance = s_balances[account];\\n        // how much have they been paid already?\\n        uint256 amountPaid = s_userRewardPerTokenPaid[account];\\n        uint256 currentRewardPerToken = rewardPerToken();\\n        uint256 pastRewards = s_rewards[account];\\n\\n        uint256 totalEarned = ((currentBalance * (currentRewardPerToken - amountPaid)) / 1e18) + pastRewards;\\n        return totalEarned;\\n    }\\n\\n    function claimReward() external updateReward(msg.sender) {\\n        uint256 rewards = s_rewards[msg.sender];\\n        bool success = s_rewardToken.transfer(msg.sender, rewards);\\n        if(!success) {\\n            revert ClaimReward__TransferFailed();\\n        }\\n    }\\n\\n    function getStaked(address account) public view returns (uint256) {\\n        return s_balances[account];\\n    }\\n}\",\"keccak256\":\"0x63caf9ad02eb7ac9739e0ca741484c1a96bd85f10f2ae98ea4d8358e144dd7b3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200114d3803806200114d8339818101604052810190620000379190620000d7565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000171565b600081519050620000d18162000157565b92915050565b60008060408385031215620000f157620000f062000152565b5b60006200010185828601620000c0565b92505060206200011485828601620000c0565b9150509250929050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b62000162816200011e565b81146200016e57600080fd5b50565b610fcc80620001816000396000f3fe608060405234801561001057600080fd5b50600436106100f45760003560e01c8063a694fc3a11610097578063bea0815111610066578063bea0815114610261578063cd3daf9d14610291578063e4bc7fe9146102af578063f245ace4146102cd576100f4565b8063a694fc3a146101ed578063ab32eb6914610209578063adca9b7214610239578063b88a802f14610257576100f4565b80635997bb37116100d35780635997bb37146101755780636374cc00146101935780636a74a0fc146101b15780636aa0838f146101cf576100f4565b80628cc262146100f95780632e1a7d4d14610129578063399080ec14610145575b600080fd5b610113600480360381019061010e9190610c11565b6102fd565b6040516101209190610d40565b60405180910390f35b610143600480360381019061013e9190610c6b565b61041c565b005b61015f600480360381019061015a9190610c11565b61065e565b60405161016c9190610d40565b60405180910390f35b61017d6106a7565b60405161018a9190610d40565b60405180910390f35b61019b6106ac565b6040516101a89190610d25565b60405180910390f35b6101b96106d2565b6040516101c69190610d40565b60405180910390f35b6101d76106d8565b6040516101e49190610d40565b60405180910390f35b61020760048036038101906102029190610c6b565b6106de565b005b610223600480360381019061021e9190610c11565b610922565b6040516102309190610d40565b60405180910390f35b61024161093a565b60405161024e9190610d25565b60405180910390f35b61025f61095e565b005b61027b60048036038101906102769190610c11565b610b39565b6040516102889190610d40565b60405180910390f35b610299610b51565b6040516102a69190610d40565b60405180910390f35b6102b7610bb4565b6040516102c49190610d40565b60405180910390f35b6102e760048036038101906102e29190610c11565b610bba565b6040516102f49190610d40565b60405180910390f35b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000610390610b51565b90506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081670de0b6b3a764000085856103ee9190610e3c565b876103f99190610de2565b6104039190610db1565b61040d9190610d5b565b90508095505050505050919050565b33610425610b51565b6006819055504260078190555061043b816102fd565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000811415610500576040517f3c2b29f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461054f9190610e3c565b9250508190555082600560008282546105689190610e3c565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b81526004016105cd929190610cfc565b602060405180830381600087803b1580156105e757600080fd5b505af11580156105fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061f9190610c3e565b905080610658576040517f8ecca7d100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60055481565b60075481565b336106e7610b51565b600681905550426007819055506106fd816102fd565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160008114156107c2576040517f3c2b29f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108119190610d5b565b92505081905550826005600082825461082a9190610d5b565b9250508190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b815260040161089193929190610cc5565b602060405180830381600087803b1580156108ab57600080fd5b505af11580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190610c3e565b90508061091c576040517feb4c684700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60026020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b33610967610b51565b6006819055504260078190555061097d816102fd565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600654600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610aa9929190610cfc565b602060405180830381600087803b158015610ac357600080fd5b505af1158015610ad7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afb9190610c3e565b905080610b34576040517f0878bef300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b60046020528060005260406000206000915090505481565b6000806005541415610b67576006549050610bb1565b600554670de0b6b3a7640000606460075442610b839190610e3c565b610b8d9190610de2565b610b979190610de2565b610ba19190610db1565b600654610bae9190610d5b565b90505b90565b60065481565b60036020528060005260406000206000915090505481565b600081359050610be181610f51565b92915050565b600081519050610bf681610f68565b92915050565b600081359050610c0b81610f7f565b92915050565b600060208284031215610c2757610c26610f4c565b5b6000610c3584828501610bd2565b91505092915050565b600060208284031215610c5457610c53610f4c565b5b6000610c6284828501610be7565b91505092915050565b600060208284031215610c8157610c80610f4c565b5b6000610c8f84828501610bfc565b91505092915050565b610ca181610e70565b82525050565b610cb081610eb8565b82525050565b610cbf81610eae565b82525050565b6000606082019050610cda6000830186610c98565b610ce76020830185610c98565b610cf46040830184610cb6565b949350505050565b6000604082019050610d116000830185610c98565b610d1e6020830184610cb6565b9392505050565b6000602082019050610d3a6000830184610ca7565b92915050565b6000602082019050610d556000830184610cb6565b92915050565b6000610d6682610eae565b9150610d7183610eae565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610da657610da5610eee565b5b828201905092915050565b6000610dbc82610eae565b9150610dc783610eae565b925082610dd757610dd6610f1d565b5b828204905092915050565b6000610ded82610eae565b9150610df883610eae565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e3157610e30610eee565b5b828202905092915050565b6000610e4782610eae565b9150610e5283610eae565b925082821015610e6557610e64610eee565b5b828203905092915050565b6000610e7b82610e8e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610ec382610eca565b9050919050565b6000610ed582610edc565b9050919050565b6000610ee782610e8e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b610f5a81610e70565b8114610f6557600080fd5b50565b610f7181610e82565b8114610f7c57600080fd5b50565b610f8881610eae565b8114610f9357600080fd5b5056fea2646970667358221220c7a6508d8cd82af2791e50aea53699a8371d2819766c5dbe0e0f5066ec9d977a64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 91,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_stakingToken",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 94,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 98,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 102,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_userRewardPerTokenPaid",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 106,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewards",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 111,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 113,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_rewardPerStakedToken",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 115,
        "contract": "contracts/Staking.sol:Staking",
        "label": "s_lastUpdateTime",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}